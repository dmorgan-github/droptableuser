(
synth: {|in|
    VSTPlugin.ar(in, 2,
        params: [
			'AGC (Globals)', 'mbitfun_agcglobals'.kr(0.0),
			'AND (AND)', 'mbitfun_andand'.kr(0.0),
			'AND 1 (AND)', 'mbitfun_and1and'.kr(0.0),
			'AND 10 (AND)', 'mbitfun_and10and'.kr(0.0),
			'AND 11 (AND)', 'mbitfun_and11and'.kr(0.0),
			'AND 12 (AND)', 'mbitfun_and12and'.kr(0.0),
			'AND 13 (AND)', 'mbitfun_and13and'.kr(0.0),
			'AND 14 (AND)', 'mbitfun_and14and'.kr(0.0),
			'AND 15 (AND)', 'mbitfun_and15and'.kr(0.0),
			'AND 16 (AND)', 'mbitfun_and16and'.kr(0.0),
			'AND 2 (AND)', 'mbitfun_and2and'.kr(0.0),
			'AND 3 (AND)', 'mbitfun_and3and'.kr(0.0),
			'AND 4 (AND)', 'mbitfun_and4and'.kr(0.0),
			'AND 5 (AND)', 'mbitfun_and5and'.kr(0.0),
			'AND 6 (AND)', 'mbitfun_and6and'.kr(0.0),
			'AND 7 (AND)', 'mbitfun_and7and'.kr(0.0),
			'AND 8 (AND)', 'mbitfun_and8and'.kr(0.0),
			'AND 9 (AND)', 'mbitfun_and9and'.kr(0.0),
			'Bits (Globals)', 'mbitfun_bitsglobals'.kr(0.46666666865349),
			'Count (Synchronization)', 'mbitfun_countsynchronization'.kr(0.0),
			'DC blocker (Globals)', 'mbitfun_dcblockerglobals'.kr(1.0),
			'Delay (Globals)', 'mbitfun_delayglobals'.kr(0.0),
			'Dry/Wet', 'mbitfun_drywet'.kr(1.0),
			'Input gain', 'mbitfun_inputgain'.kr(0.5),
			'Length (Synchronization)', 'mbitfun_lengthsynchronization'.kr(0.64285713434219),
			'Low-pass (Globals)', 'mbitfun_lowpassglobals'.kr(0.86735332012177),
			'Modify (Synchronization)', 'mbitfun_modifysynchronization'.kr(0.70710676908493),
			'OR (OR)', 'mbitfun_oror'.kr(0.0),
			'OR 1 (OR)', 'mbitfun_or1or'.kr(0.0),
			'OR 10 (OR)', 'mbitfun_or10or'.kr(0.0),
			'OR 11 (OR)', 'mbitfun_or11or'.kr(0.0),
			'OR 12 (OR)', 'mbitfun_or12or'.kr(0.0),
			'OR 13 (OR)', 'mbitfun_or13or'.kr(0.0),
			'OR 14 (OR)', 'mbitfun_or14or'.kr(0.0),
			'OR 15 (OR)', 'mbitfun_or15or'.kr(0.0),
			'OR 16 (OR)', 'mbitfun_or16or'.kr(0.0),
			'OR 2 (OR)', 'mbitfun_or2or'.kr(0.0),
			'OR 3 (OR)', 'mbitfun_or3or'.kr(0.0),
			'OR 4 (OR)', 'mbitfun_or4or'.kr(0.0),
			'OR 5 (OR)', 'mbitfun_or5or'.kr(0.0),
			'OR 6 (OR)', 'mbitfun_or6or'.kr(0.0),
			'OR 7 (OR)', 'mbitfun_or7or'.kr(0.0),
			'OR 8 (OR)', 'mbitfun_or8or'.kr(0.0),
			'OR 9 (OR)', 'mbitfun_or9or'.kr(0.0),
			'Output gain', 'mbitfun_outputgain'.kr(0.5),
			'Param 1', 'mbitfun_param1'.kr(0.5),
			'Param 2', 'mbitfun_param2'.kr(0.5),
			'Param 3', 'mbitfun_param3'.kr(0.5),
			'Param 4', 'mbitfun_param4'.kr(0.5),
			//'Previous(PresetTrigger)', 'mbitfun_previouspresettrigger'.kr(0.0),
			'Replace (Replace)', 'mbitfun_replacereplace'.kr(0.0),
			'Replace 1 (Replace)', 'mbitfun_replace1replace'.kr(0.0),
			'Replace 10 (Replace)', 'mbitfun_replace10replace'.kr(0.0),
			'Replace 11 (Replace)', 'mbitfun_replace11replace'.kr(0.0),
			'Replace 12 (Replace)', 'mbitfun_replace12replace'.kr(0.0),
			'Replace 13 (Replace)', 'mbitfun_replace13replace'.kr(0.0),
			'Replace 14 (Replace)', 'mbitfun_replace14replace'.kr(0.0),
			'Replace 15 (Replace)', 'mbitfun_replace15replace'.kr(0.0),
			'Replace 16 (Replace)', 'mbitfun_replace16replace'.kr(0.0),
			'Replace 2 (Replace)', 'mbitfun_replace2replace'.kr(0.0),
			'Replace 3 (Replace)', 'mbitfun_replace3replace'.kr(0.0),
			'Replace 4 (Replace)', 'mbitfun_replace4replace'.kr(0.0),
			'Replace 5 (Replace)', 'mbitfun_replace5replace'.kr(0.0),
			'Replace 6 (Replace)', 'mbitfun_replace6replace'.kr(0.0),
			'Replace 7 (Replace)', 'mbitfun_replace7replace'.kr(0.0),
			'Replace 8 (Replace)', 'mbitfun_replace8replace'.kr(0.0),
			'Replace 9 (Replace)', 'mbitfun_replace9replace'.kr(0.0),
			'Rotate (AND)', 'mbitfun_rotateand'.kr(1.0),
			'Rotate (OR)', 'mbitfun_rotateor'.kr(1.0),
			'Rotate (Replace)', 'mbitfun_rotatereplace'.kr(1.0),
			'Rotate (XOR)', 'mbitfun_rotatexor'.kr(1.0),
			'Shift (AND)', 'mbitfun_shiftand'.kr(0.5),
			'Shift (OR)', 'mbitfun_shiftor'.kr(0.5625),
			'Shift (Replace)', 'mbitfun_shiftreplace'.kr(0.5),
			'Shift (XOR)', 'mbitfun_shiftxor'.kr(0.5),
			'Side-chain (Globals)', 'mbitfun_sidechainglobals'.kr(0.0),
			'Synchronizat(Synchroniza', 'mbitfun_synchronizatsynchroniza'.kr(0.0),
			'Type (Synchronization)', 'mbitfun_typesynchronization'.kr(0.0),
			'XOR (XOR)', 'mbitfun_xorxor'.kr(1.0),
			'XOR 1 (XOR)', 'mbitfun_xor1xor'.kr(0.0),
			'XOR 10 (XOR)', 'mbitfun_xor10xor'.kr(0.0),
			'XOR 11 (XOR)', 'mbitfun_xor11xor'.kr(0.0),
			'XOR 12 (XOR)', 'mbitfun_xor12xor'.kr(0.0),
			'XOR 13 (XOR)', 'mbitfun_xor13xor'.kr(0.0),
			'XOR 14 (XOR)', 'mbitfun_xor14xor'.kr(0.0),
			'XOR 15 (XOR)', 'mbitfun_xor15xor'.kr(0.0),
			'XOR 16 (XOR)', 'mbitfun_xor16xor'.kr(0.0),
			'XOR 2 (XOR)', 'mbitfun_xor2xor'.kr(0.0),
			'XOR 3 (XOR)', 'mbitfun_xor3xor'.kr(0.0),
			'XOR 4 (XOR)', 'mbitfun_xor4xor'.kr(0.0),
			'XOR 5 (XOR)', 'mbitfun_xor5xor'.kr(0.0),
			'XOR 6 (XOR)', 'mbitfun_xor6xor'.kr(0.0),
			'XOR 7 (XOR)', 'mbitfun_xor7xor'.kr(0.0),
			'XOR 8 (XOR)', 'mbitfun_xor8xor'.kr(0.0),
			'XOR 9 (XOR)', 'mbitfun_xor9xor'.kr(0.0),
			//'next (Preset trigger)', 'mbitfun_nextpresettrigger'.kr(0.0),
		],
		info:'MBitFun'
    )
}
)